definitions:
  entity.Event:
    properties:
      capacity:
        type: integer
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      price:
        type: number
      start_date:
        type: string
      status:
        $ref: '#/definitions/entity.EventStatus'
      tickets:
        items:
          $ref: '#/definitions/entity.Ticket'
        type: array
      updated_at:
        type: string
    type: object
  entity.EventStatus:
    enum:
    - active
    - ongoing
    - finished
    type: string
    x-enum-varnames:
    - EventStatusActive
    - EventStatusOngoing
    - EventStatusFinished
  entity.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
  entity.Ticket:
    properties:
      created_at:
        type: string
      event:
        $ref: '#/definitions/entity.Event'
      event_id:
        type: integer
      id:
        type: integer
      purchased_at:
        type: string
      status:
        $ref: '#/definitions/entity.TicketStatus'
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.TicketStatus:
    enum:
    - available
    - purchased
    - cancelled
    type: string
    x-enum-varnames:
    - TicketStatusAvailable
    - TicketStatusPurchased
    - TicketStatusCancelled
  entity.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/entity.Role'
      tickets:
        items:
          $ref: '#/definitions/entity.Ticket'
        type: array
      updated_at:
        type: string
    type: object
  service.EventSalesSummary:
    properties:
      event_id:
        type: integer
      event_name:
        type: string
      total_revenue:
        type: number
      total_tickets:
        type: integer
    type: object
  service.SalesSummary:
    properties:
      event_summary:
        items:
          $ref: '#/definitions/service.EventSalesSummary'
        type: array
      total_events:
        type: integer
      total_revenue:
        type: number
      total_tickets:
        type: integer
    type: object
info:
  contact: {}
paths:
  /events:
    get:
      consumes:
      - application/json
      description: Get a list of all events with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event with the provided details
      parameters:
      - description: Event Data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/entity.Event'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete an event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Get details of a specific event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Event'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an existing event with the provided details
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Event Data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/entity.Event'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update an event
      tags:
      - events
  /login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login Credentials
        in: body
        name: login
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - auth
  /reports/event/{id}:
    get:
      consumes:
      - application/json
      description: Get a summary of ticket sales and revenue for a specific event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.EventSalesSummary'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get sales report for a specific event
      tags:
      - reports
  /reports/summary:
    get:
      consumes:
      - application/json
      description: Get a summary of ticket sales and revenue across all events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.SalesSummary'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get overall sales report
      tags:
      - reports
  /tickets:
    get:
      consumes:
      - application/json
      description: Get a list of all tickets with pagination (admin sees all, user
        sees only their own)
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all tickets
      tags:
      - tickets
    post:
      consumes:
      - application/json
      description: Purchase a ticket for an event
      parameters:
      - description: Ticket Data (eventID is required)
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/entity.Ticket'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Purchase a ticket
      tags:
      - tickets
  /tickets/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific ticket by its ID
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Ticket'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get ticket by ID
      tags:
      - tickets
    patch:
      consumes:
      - application/json
      description: Cancel a purchased ticket
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cancel a ticket
      tags:
      - tickets
swagger: "2.0"
